apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'

version = pluginVersion
project.archivesBaseName = "android-gradle-plugin"

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenAndroid(MavenPublication) {
            groupId = 'com.sendata.analytics.android'
            artifactId = 'sa-sdk-android-plugin'
            version = version
            artifact sourceJar
            artifact javadocJar
            artifact jar
            // 配置 pop 文件格式
            pom {
                packaging 'jar'
                name = 'The official Android SDK Plugin for Sendata Analytics.'
                description = 'The official Android SDK Plugin for Sendata Analytics.'
                url = 'The official Android SDK Plugin for Sendata Analytics.'
                licenses {
                    license {
                        name='The Apache Software License, Version 2.0'
                        url='http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'haibin80s'
                        name = 'haibin80s'
                        email = 'haibin80s@sina.com'
                    }
                }
                scm {
                    connection = 'https://github.com/haibin80s/sa-sdk-android-plugin'
                    developerConnection = 'https://github.com/haibin80s/sa-sdk-android-plugin.git'
                    url = 'https://github.com/haibin80s/sa-sdk-android-plugin'
                }
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.all { configuration ->
                        def name = configuration.name
                        if (name == 'implementation' || name == 'releaseImplementation') {
                            configuration.allDependencies.each {
                                if (it.group != null && it.name != "unspecified" && it.version != null) {
                                    def groupId = it.group
                                    def artifactId = it.name
                                    def version = it.version
                                    if (it instanceof ProjectDependency) {
                                        def properties = it.getDependencyProject().getProperties()
                                        groupId = properties.get("GROUP")
                                        artifactId = properties.get("POM_ARTIFACT_ID")
                                    }
                                    println "dependency:" + groupId + ":" + artifactId + ":" + version
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', groupId)
                                    dependencyNode.appendNode('artifactId', artifactId)
                                    dependencyNode.appendNode('version', version)
                                    dependencyNode.appendNode('scope', 'compile')
                                }
                            }
                        }
                    }
                }
            }
        }
    }
//    // 配置远程仓库
//    repositories {
//        Properties properties = new Properties()
//        properties.load(project.rootProject.file('local.properties').newDataInputStream())
//        def mavenUser = properties.getProperty("maven.user")
//        def mavenPassword = properties.getProperty("maven.password")
//        maven {
////            url ='../repo'
//            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
//            credentials {
//                username mavenUser
//                password mavenPassword
//            }
//        }
//    }
}

// 对 mavenAndroid 发布内容进行签名
//signing {
//    sign publishing.publications.mavenAndroid
//}